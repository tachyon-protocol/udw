package udwDnsPacket

import (
	"github.com/tachyon-protocol/udw/udwTest"
	"testing"
)

func TestDnsPacketReadQuestion1(t *testing.T) {
	buf1 := []byte{
		0x13, 0x88,
		0x01, 0x00,
		0x00, 0x01,
		0x00, 0x00,
		0x00, 0x00,
		0x00, 0x00,

		0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d,
		0x00,
		0x00, 0x01,
		0x00, 0x01,
	}
	packet, errMsg := PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Id, uint16(0x1388))
	udwTest.Equal(packet.QuestionName, "google.com")
	udwTest.Equal(packet.QuestionType, DnsTypeA)

	udwTest.Equal(packet.IsRecursionDesired(), true)
	udwTest.Equal(packet.GetOpcode(), 0)
	udwTest.Equal(packet.GetRcode(), RcodeNOERROR)
	udwTest.Equal(packet.IsAuthenticatedData(), false)
	udwTest.Equal(packet.IsBitReserverd9(), false)
	udwTest.Equal(packet.IsAuthoritative(), false)
	udwTest.Equal(packet.IsCheckingDisabled(), false)
	udwTest.Equal(packet.IsResponse(), false)
	udwTest.Equal(packet.IsTruncated(), false)
	udwTest.Equal(packet.HasCompressDomain, false)

	outBuf, errMsg := PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)
}

func TestDnsPacketReadQuestion2(t *testing.T) {
	buf1 := []byte{
		0xfa, 0x82, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63,
		0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
	}
	packet, errMsg := PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Id, uint16(0xfa82))
	udwTest.Equal(packet.QuestionName, "www.apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeA)

	udwTest.Equal(packet.IsRecursionDesired(), true)
	udwTest.Equal(packet.GetOpcode(), 0)
	udwTest.Equal(packet.GetRcode(), RcodeNOERROR)
	udwTest.Equal(packet.IsAuthenticatedData(), false)
	udwTest.Equal(packet.IsBitReserverd9(), false)
	udwTest.Equal(packet.IsAuthoritative(), false)
	udwTest.Equal(packet.IsCheckingDisabled(), false)
	udwTest.Equal(packet.IsResponse(), false)
	udwTest.Equal(packet.IsTruncated(), false)

	outBuf, errMsg := PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)
}

func TestDnsPacketReadQuestion3(t *testing.T) {

	buf1 := []byte{
		0xb3, 0x7d,
		0x81, 0x80,
		0x00, 0x01,
		0x00, 0x03,
		0x00, 0x00, 0x00, 0x00,

		0x03, 0x77, 0x77, 0x77,
		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d,
		0x00,
		0x00, 0x01,
		0x00, 0x01,

		0xc0, 0x0c,

		0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x03, 0x7c, 0x00, 0x0f, 0x03, 0x77, 0x77, 0x77, 0x01,
		0x61, 0x06, 0x73, 0x68, 0x69, 0x66, 0x65, 0x6e, 0xc0, 0x16, 0xc0, 0x2b, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0xb6, 0x00, 0x04, 0xb4, 0x61, 0x21, 0x6c, 0xc0, 0x2b, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0xb6, 0x00, 0x04, 0xb4, 0x61, 0x21, 0x6b,
	}
	packet, errMsg := PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Id, uint16(45949))
	udwTest.Equal(packet.QuestionName, "www.apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeA)

	udwTest.Equal(packet.IsRecursionDesired(), true)
	udwTest.Equal(packet.GetOpcode(), 0)
	udwTest.Equal(packet.GetRcode(), RcodeNOERROR)
	udwTest.Equal(packet.IsAuthenticatedData(), false)
	udwTest.Equal(packet.IsBitReserverd9(), false)
	udwTest.Equal(packet.IsAuthoritative(), false)
	udwTest.Equal(packet.IsCheckingDisabled(), false)
	udwTest.Equal(packet.IsResponse(), true)
	udwTest.Equal(packet.IsTruncated(), false)

	_, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")

}

func TestDnsPacketReadQuestion4(t *testing.T) {
	buf1 := []byte{0xb1, 0x95,
		0x85, 0x00,
		0x00, 0x01,
		0x00, 0x02,
		0x00, 0x05,
		0x00, 0x05,

		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x10, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x10, 0x00,
		0x01, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x5a, 0x59, 0x76, 0x3d, 0x73, 0x70, 0x66, 0x31, 0x20, 0x69,
		0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a, 0x73, 0x70, 0x66, 0x31, 0x2e, 0x61, 0x70, 0x70, 0x6c,
		0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a, 0x73, 0x70,
		0x66, 0x32, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x63,
		0x6c, 0x75, 0x64, 0x65, 0x3a, 0x73, 0x70, 0x66, 0x33, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e,
		0x63, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x6d, 0x78, 0x20, 0x70, 0x74, 0x72, 0x20, 0x2d, 0x61, 0x6c,
		0x6c, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x45, 0x44, 0x67, 0x6f,
		0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x73, 0x69, 0x74, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
		0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x47, 0x48, 0x62, 0x39, 0x38, 0x2d, 0x36, 0x6d, 0x73,
		0x71, 0x79, 0x78, 0x5f, 0x71, 0x71, 0x6a, 0x47, 0x6c, 0x35, 0x65, 0x52, 0x61, 0x74, 0x44, 0x33,
		0x51, 0x54, 0x48, 0x79, 0x56, 0x42, 0x36, 0x2d, 0x78, 0x51, 0x33, 0x67, 0x4a, 0x42, 0x35, 0x55,
		0x77, 0x4d, 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00, 0x06, 0x03, 0x6e,
		0x73, 0x33, 0xc0, 0x0c, 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00, 0x06,
		0x03, 0x64, 0x6e, 0x73, 0xc0, 0x0c, 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x51, 0x80,
		0x00, 0x06, 0x03, 0x6e, 0x73, 0x32, 0xc0, 0x0c, 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01,
		0x51, 0x80, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x34, 0xc0, 0x0c, 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01,
		0x00, 0x01, 0x51, 0x80, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x37, 0xc0, 0x0c, 0xc0, 0xf0, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00, 0x04, 0xca, 0x6c, 0x16, 0xdc, 0xc1, 0x02, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00, 0x04, 0x3d, 0x87, 0xa5, 0xeb, 0xc0, 0xde, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00, 0x04, 0xdc, 0xb5, 0x25, 0x0a, 0xc1, 0x14, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00, 0x04, 0xdc, 0xb5, 0x26, 0x0a, 0xc1, 0x26, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x01, 0x51, 0x80, 0x00, 0x04, 0xb4, 0x4c, 0x4c, 0x5c}
	packet, errMsg := PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Id, uint16(45461))
	udwTest.Equal(packet.QuestionName, "apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeTXT)

	udwTest.Equal(packet.IsRecursionDesired(), true)
	udwTest.Equal(packet.GetOpcode(), 0)
	udwTest.Equal(packet.GetRcode(), RcodeNOERROR)
	udwTest.Equal(packet.IsAuthenticatedData(), false)
	udwTest.Equal(packet.IsBitReserverd9(), false)
	udwTest.Equal(packet.IsAuthoritative(), true)
	udwTest.Equal(packet.IsCheckingDisabled(), false)
	udwTest.Equal(packet.IsResponse(), true)
	udwTest.Equal(packet.IsTruncated(), false)

	_, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")

}

func TestDnsPacketReadQuestion5(t *testing.T) {
	buf1 := []byte{0x45, 0xf9,
		0x01, 0x20,
		0x00, 0x01,
		0x00, 0x00,
		0x00, 0x00,
		0x00, 0x01,

		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d,
		0x00,
		0x00, 0x01, 0x00, 0x01,

		0x00, 0x00, 0x29, 0x10, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	packet, errMsg := PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Id, uint16(17913))
	udwTest.Equal(packet.QuestionName, "apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeA)

	udwTest.Equal(packet.IsRecursionDesired(), true)
	udwTest.Equal(packet.GetOpcode(), 0)
	udwTest.Equal(packet.GetRcode(), RcodeNOERROR)
	udwTest.Equal(packet.IsAuthenticatedData(), true)
	udwTest.Equal(packet.IsBitReserverd9(), false)
	udwTest.Equal(packet.IsAuthoritative(), false)
	udwTest.Equal(packet.IsCheckingDisabled(), false)
	udwTest.Equal(packet.IsResponse(), false)
	udwTest.Equal(packet.IsTruncated(), false)

	udwTest.Equal(len(packet.AnswerList), 0)

	_, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")

}

func TestDnsPacketReadAnswer1(t *testing.T) {
	buf1 := []byte{
		0xfa, 0x82,
		0x81, 0x80,
		0x00, 0x01,
		0x00, 0x02,
		0x00, 0x00,
		0x00, 0x00,

		0x03, 0x77, 0x77, 0x77,
		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d,
		0x00,
		0x00, 0x01,
		0x00, 0x01,

		0x03, 0x77, 0x77, 0x77,
		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d,
		0x00,

		0x00, 0x01,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x00, 0x04,
		0x73, 0xef, 0xd2, 0x1b, 0x03, 0x77, 0x77, 0x77,
		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63,
		0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x76, 0x00, 0x04, 0x73, 0xef, 0xd3,
		0x70,
	}
	packet, errMsg := PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Id, uint16(0xfa82))
	udwTest.Equal(packet.QuestionName, "www.apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeA)

	udwTest.Equal(packet.IsRecursionDesired(), true)
	udwTest.Equal(packet.GetOpcode(), 0)
	udwTest.Equal(packet.GetRcode(), RcodeNOERROR)
	udwTest.Equal(packet.IsAuthenticatedData(), false)
	udwTest.Equal(packet.IsBitReserverd9(), false)
	udwTest.Equal(packet.IsAuthoritative(), false)
	udwTest.Equal(packet.IsCheckingDisabled(), false)
	udwTest.Equal(packet.IsResponse(), true)
	udwTest.Equal(packet.IsTruncated(), false)

	udwTest.Equal(len(packet.AnswerList), 2)
	udwTest.Equal(packet.AnswerList[0].Name, "www.apple.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeA)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(118))
	udwTest.Equal(packet.AnswerList[0].Result, "115.239.210.27")

	udwTest.Equal(packet.AnswerList[1].Name, "www.apple.com")
	udwTest.Equal(packet.AnswerList[1].Type, DnsTypeA)
	udwTest.Equal(packet.AnswerList[1].Ttl, uint32(118))
	udwTest.Equal(packet.AnswerList[1].Result, "115.239.211.112")

	outBuf, errMsg := PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)
}

func TestDnsPacketReadDnsRRType(ot *testing.T) {
	buf1 := []byte{0x9b, 0x1a, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x69, 0x70, 0x76,
		0x36, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00, 0x01,
		0x04, 0x69, 0x70, 0x76, 0x36, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
		0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x17, 0xad, 0x00, 0x10, 0x24, 0x00, 0xda, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x0d, 0xbf, 0x00, 0x00, 0x01, 0x00}
	packet, errMsg := PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.QuestionName, "ipv6.apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeAAAA)

	udwTest.Equal(len(packet.AnswerList), 1)
	udwTest.Equal(packet.AnswerList[0].Name, "ipv6.apple.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeAAAA)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(6061))
	udwTest.Equal(packet.AnswerList[0].Result, "2400:da00::dbf:0:100")

	outBuf, errMsg := PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)

	buf1 = []byte{0xcd, 0xbc, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x05, 0x61, 0x70, 0x70,
		0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x02, 0x00, 0x01, 0x05, 0x61, 0x70, 0x70, 0x6c,
		0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x4a, 0xc2, 0x00, 0x0f,
		0x03, 0x6e, 0x73, 0x32, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x05,
		0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01,
		0x4a, 0xc2, 0x00, 0x0f, 0x03, 0x6e, 0x73, 0x37, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63,
		0x6f, 0x6d, 0x00, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x02,
		0x00, 0x01, 0x00, 0x01, 0x4a, 0xc2, 0x00, 0x0f, 0x03, 0x6e, 0x73, 0x34, 0x05, 0x61, 0x70, 0x70,
		0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f,
		0x6d, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x4a, 0xc2, 0x00, 0x0f, 0x03, 0x6e, 0x73, 0x33,
		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x05, 0x61, 0x70, 0x70, 0x6c,
		0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x4a, 0xc2, 0x00, 0x0f,
		0x03, 0x64, 0x6e, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00}
	packet, errMsg = PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.QuestionName, "apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeNS)

	udwTest.Equal(len(packet.AnswerList), 5)
	udwTest.Equal(packet.AnswerList[0].Name, "apple.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeNS)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(84674))
	udwTest.Equal(packet.AnswerList[0].Result, "ns2.apple.com")

	outBuf, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)

	buf1 = []byte{0x98, 0x2a, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
		0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x05, 0x00, 0x01, 0x03,
		0x77, 0x77, 0x77, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x05,
		0x00, 0x01, 0x00, 0x00, 0x06, 0xae, 0x00, 0x1b, 0x03, 0x77, 0x77, 0x77, 0x05, 0x61, 0x70, 0x70,
		0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x07, 0x65, 0x64, 0x67, 0x65, 0x6b, 0x65, 0x79, 0x03, 0x6e,
		0x65, 0x74, 0x00}
	packet, errMsg = PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.QuestionName, "www.apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeCNAME)

	udwTest.Equal(len(packet.AnswerList), 1)
	udwTest.Equal(packet.AnswerList[0].Name, "www.apple.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeCNAME)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(1710))
	udwTest.Equal(packet.AnswerList[0].Result, "www.apple.com.edgekey.net")

	outBuf, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)

	buf1 = []byte{0x65, 0x17, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x61, 0x70, 0x70,
		0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x06, 0x00, 0x01, 0x05, 0x61, 0x70, 0x70, 0x6c,
		0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x1b, 0x3f, 0x00, 0x31,
		0x03, 0x64, 0x6e, 0x73, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x02,
		0x73, 0x61, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x77, 0xee, 0xbc,
		0x50, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x27, 0x8d, 0x00, 0x00, 0x00, 0x1c,
		0x20}
	packet, errMsg = PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.QuestionName, "apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeSOA)

	udwTest.Equal(len(packet.AnswerList), 1)
	udwTest.Equal(packet.AnswerList[0].Name, "apple.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeSOA)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(6975))
	udwTest.Equal(packet.AnswerList[0].Result, "{\"Ns\":\"dns.apple.com\",\"Mbox\":\"sa.apple.com\",\"Serial\":2012134480,\"Refresh\":300,\"Retry\":300,\"Expire\":2592000,\"Minttl\":7200}")

	outBuf, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)

	buf1 = []byte{0x3a, 0xd3, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x38, 0x01, 0x38,
		0x01, 0x38, 0x01, 0x38, 0x07, 0x69, 0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x04, 0x61, 0x72, 0x70,
		0x61, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x01, 0x38, 0x01, 0x38, 0x01, 0x38, 0x01, 0x38, 0x07, 0x69,
		0x6e, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x04, 0x61, 0x72, 0x70, 0x61, 0x00, 0x00, 0x0c, 0x00, 0x01,
		0x00, 0x01, 0x4f, 0xdc, 0x00, 0x0c, 0x03, 0x64, 0x6e, 0x73, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
		0x65, 0x00, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	packet, errMsg = PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.QuestionName, "8.8.8.8.in-addr.arpa")
	udwTest.Equal(packet.QuestionType, DnsTypePTR)

	udwTest.Equal(len(packet.AnswerList), 1)
	udwTest.Equal(packet.AnswerList[0].Name, "8.8.8.8.in-addr.arpa")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypePTR)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(85980))
	udwTest.Equal(packet.AnswerList[0].Result, "dns.google")

	outBuf, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)

	buf1 = []byte{
		0xda, 0xb0, 0x81, 0x80, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x61, 0x70, 0x70,
		0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x0f, 0x00, 0x01, 0x05, 0x61, 0x70, 0x70, 0x6c,
		0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x1b, 0xf7, 0x00, 0x12,
		0x00, 0x14, 0x04, 0x6a, 0x70, 0x6d, 0x78, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f,
		0x6d, 0x00, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x0f, 0x00,
		0x01, 0x00, 0x00, 0x1b, 0xf7, 0x00, 0x13, 0x00, 0x0a, 0x02, 0x6d, 0x78, 0x01, 0x6e, 0x06, 0x73,
		0x68, 0x69, 0x66, 0x65, 0x6e, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x1b, 0xf7, 0x00, 0x12, 0x00,
		0x14, 0x04, 0x6d, 0x78, 0x35, 0x30, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x0f, 0x00, 0x01,
		0x00, 0x00, 0x1b, 0xf7, 0x00, 0x11, 0x00, 0x14, 0x03, 0x6d, 0x78, 0x31, 0x05, 0x61, 0x70, 0x70,
		0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00}
	packet, errMsg = PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.QuestionName, "apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeMX)

	udwTest.Equal(len(packet.AnswerList), 4)
	udwTest.Equal(packet.AnswerList[0].Name, "apple.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeMX)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(7159))
	udwTest.Equal(packet.AnswerList[0].Result, "{\"Preference\":20,\"Mx\":\"jpmx.apple.com\"}")

	outBuf, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)

	buf1 = []byte{0x6e, 0xe4, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, 0x30, 0x31,
		0x36, 0x31, 0x30, 0x32, 0x35, 0x0a, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6b, 0x65, 0x79,
		0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x10, 0x00, 0x01,
		0x08, 0x32, 0x30, 0x31, 0x36, 0x31, 0x30, 0x32, 0x35, 0x0a, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
		0x6e, 0x6b, 0x65, 0x79, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
		0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x01, 0x93, 0xb7, 0x6b, 0x3d, 0x72, 0x73, 0x61,
		0x3b, 0x20, 0x70, 0x3d, 0x6d, 0x69, 0x69, 0x62, 0x69, 0x6a, 0x61, 0x6e, 0x62, 0x67, 0x6b, 0x71,
		0x68, 0x6b, 0x69, 0x67, 0x39, 0x77, 0x30, 0x62, 0x61, 0x71, 0x65, 0x66, 0x61, 0x61, 0x6f, 0x63,
		0x61, 0x71, 0x38, 0x61, 0x6d, 0x69, 0x69, 0x62, 0x63, 0x67, 0x6b, 0x63, 0x61, 0x71, 0x65, 0x61,
		0x77, 0x78, 0x6e, 0x7a, 0x66, 0x31, 0x6a, 0x38, 0x73, 0x6a, 0x70, 0x64, 0x6c, 0x65, 0x72, 0x6a,
		0x66, 0x39, 0x73, 0x70, 0x62, 0x6e, 0x65, 0x6d, 0x30, 0x69, 0x6b, 0x35, 0x38, 0x6b, 0x66, 0x31,
		0x69, 0x6c, 0x63, 0x31, 0x6e, 0x75, 0x67, 0x6b, 0x61, 0x74, 0x74, 0x6c, 0x39, 0x76, 0x37, 0x66,
		0x78, 0x39, 0x68, 0x78, 0x6a, 0x78, 0x70, 0x6d, 0x6c, 0x6e, 0x68, 0x76, 0x74, 0x73, 0x6b, 0x76,
		0x7a, 0x38, 0x79, 0x72, 0x75, 0x61, 0x65, 0x6f, 0x7a, 0x6c, 0x65, 0x69, 0x78, 0x74, 0x67, 0x74,
		0x6b, 0x31, 0x73, 0x38, 0x31, 0x7a, 0x7a, 0x69, 0x65, 0x35, 0x6d, 0x6a, 0x30, 0x61, 0x69, 0x67,
		0x6e, 0x32, 0x77, 0x6c, 0x66, 0x74, 0x34, 0x6b, 0x79, 0x66, 0x71, 0x6c, 0x64, 0x66, 0x79, 0x65,
		0x39, 0x35, 0x79, 0x6c, 0x71, 0x68, 0x6a, 0x79, 0x6e, 0x75, 0x34, 0x69, 0x37, 0x76, 0x6a, 0x31,
		0x74, 0x6a, 0xda, 0x6b, 0x73, 0x66, 0x36, 0x32, 0x62, 0x74, 0x63, 0x63, 0x62, 0x6c, 0x2b, 0x33,
		0x78, 0x68, 0x62, 0x6b, 0x2b, 0x6f, 0x64, 0x35, 0x70, 0x6c, 0x71, 0x79, 0x68, 0x78, 0x68, 0x77,
		0x75, 0x7a, 0x6f, 0x6b, 0x6f, 0x65, 0x70, 0x35, 0x6c, 0x34, 0x6c, 0x63, 0x69, 0x68, 0x67, 0x6b,
		0x6f, 0x6e, 0x76, 0x75, 0x2f, 0x6f, 0x79, 0x37, 0x6e, 0x6e, 0x65, 0x65, 0x36, 0x71, 0x75, 0x71,
		0x66, 0x66, 0x2f, 0x79, 0x30, 0x79, 0x73, 0x6c, 0x77, 0x66, 0x32, 0x77, 0x76, 0x61, 0x32, 0x6b,
		0x64, 0x38, 0x6c, 0x36, 0x72, 0x30, 0x61, 0x72, 0x32, 0x64, 0x79, 0x74, 0x2f, 0x33, 0x77, 0x7a,
		0x63, 0x66, 0x6b, 0x6e, 0x69, 0x37, 0x78, 0x68, 0x76, 0x70, 0x71, 0x68, 0x39, 0x68, 0x6e, 0x63,
		0x69, 0x77, 0x62, 0x65, 0x6c, 0x67, 0x70, 0x77, 0x74, 0x78, 0x63, 0x73, 0x68, 0x62, 0x78, 0x31,
		0x77, 0x76, 0x62, 0x6c, 0x63, 0x67, 0x6e, 0x71, 0x61, 0x75, 0x63, 0x64, 0x6a, 0x72, 0x66, 0x32,
		0x79, 0x77, 0x7a, 0x61, 0x77, 0x71, 0x6d, 0x7a, 0x35, 0x36, 0x34, 0x2f, 0x31, 0x69, 0x70, 0x6c,
		0x31, 0x69, 0x6d, 0x6b, 0x31, 0x6e, 0x61, 0x66, 0x70, 0x6a, 0x6b, 0x37, 0x35, 0x6b, 0x74, 0x75,
		0x6d, 0x76, 0x6e, 0x7a, 0x36, 0x6f, 0x72, 0x75, 0x69, 0x6e, 0x33, 0x6a, 0x62, 0x7a, 0x77, 0x70,
		0x39, 0x72, 0x72, 0x70, 0x6e, 0x61, 0x65, 0x69, 0x39, 0x63, 0x75, 0x2f, 0x38, 0x6b, 0x66, 0x73,
		0x6b, 0x68, 0x32, 0x65, 0x79, 0x39, 0x71, 0x69, 0x64, 0x61, 0x71, 0x61, 0x62}

	packet, errMsg = PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.QuestionName, "20161025._domainkey.google.com")
	udwTest.Equal(packet.QuestionType, DnsTypeTXT)

	udwTest.Equal(len(packet.AnswerList), 1)
	udwTest.Equal(packet.AnswerList[0].Name, "20161025._domainkey.google.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeTXT)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(5))
	udwTest.Equal(packet.AnswerList[0].Result, "[\"k=rsa; p=miibijanbgkqhkig9w0baqefaaocaq8amiibcgkcaqeawxnzf1j8sjpdlerjf9spbnem0ik58kf1ilc1nugkattl9v7fx9hxjxpmlnhvtskvz8yruaeozleixtgtk1s81zzie5mj0aign2wlft4kyfqldfye95ylqhjynu4i7vj1tj\",\"ksf62btccbl+3xhbk+od5plqyhxhwuzokoep5l4lcihgkonvu/oy7nnee6quqff/y0yslwf2wva2kd8l6r0ar2dyt/3wzcfkni7xhvpqh9hnciwbelgpwtxcshbx1wvblcgnqaucdjrf2ywzawqmz564/1ipl1imk1nafpjk75ktumvnz6oruin3jbzwp9rrpnaei9cu/8kfskh2ey9qidaqab\"]")

	outBuf, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)

	buf1 = []byte{0xa6, 0x7f, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x5f, 0x73, 0x69,
		0x70, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x21, 0x00, 0x01, 0x04, 0x5f, 0x73, 0x69, 0x70, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05,
		0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x21, 0x00, 0x01, 0x00, 0x01,
		0x51, 0x29, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x13, 0xc4, 0x0d, 0x6e, 0x77, 0x6b, 0x2d, 0x74,
		0x62, 0x65, 0x72, 0x67, 0x2d, 0x65, 0x78, 0x70, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63,
		0x6f, 0x6d, 0x00}

	packet, errMsg = PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.QuestionName, "_sip._tcp.apple.com")
	udwTest.Equal(packet.QuestionType, DnsTypeSRV)

	udwTest.Equal(len(packet.AnswerList), 1)
	udwTest.Equal(packet.AnswerList[0].Name, "_sip._tcp.apple.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeSRV)
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(86313))
	udwTest.Equal(packet.AnswerList[0].Result, "{\"Priority\":0,\"Weight\":0,\"Port\":5060,\"Target\":\"nwk-tberg-exp.apple.com\"}")

	outBuf, errMsg = PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(buf1, outBuf)
}

func TestDnsPacketResp3(ot *testing.T) {
	buf1 := []byte{
		0x1e, 0xa6, 0x85, 0x00, 0x00, 0x01, 0x00, 0x04,
		0x00, 0x04, 0x00, 0x01, 0x15, 0x6d, 0x61, 0x72,
		0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
		0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
		0x64, 0x73, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
		0x6d, 0x65, 0x72, 0x11, 0x65, 0x6e, 0x76, 0x61,
		0x74, 0x6f, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6f,
		0x6e, 0x74, 0x65, 0x6e, 0x74, 0x03, 0x63, 0x6f,
		0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c,
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c,
		0x00, 0x04, 0x0d, 0x23, 0x14, 0x0b, 0xc0, 0x0c,
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c,
		0x00, 0x04, 0x0d, 0x23, 0x14, 0x4c, 0xc0, 0x0c,
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c,
		0x00, 0x04, 0x0d, 0x23, 0x14, 0x79, 0xc0, 0x0c,
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c,
		0x00, 0x04, 0x0d, 0x23, 0x14, 0x2d, 0xc0, 0x22,
		0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0xa3, 0x00,
		0x00, 0x17, 0x07, 0x6e, 0x73, 0x2d, 0x31, 0x32,
		0x36, 0x35, 0x09, 0x61, 0x77, 0x73, 0x64, 0x6e,
		0x73, 0x2d, 0x33, 0x30, 0x03, 0x6f, 0x72, 0x67,
		0x00, 0xc0, 0x22, 0x00, 0x02, 0x00, 0x01, 0x00,
		0x02, 0xa3, 0x00, 0x00, 0x19, 0x07, 0x6e, 0x73,
		0x2d, 0x31, 0x39, 0x30, 0x37, 0x09, 0x61, 0x77,
		0x73, 0x64, 0x6e, 0x73, 0x2d, 0x34, 0x36, 0x02,
		0x63, 0x6f, 0x02, 0x75, 0x6b, 0x00, 0xc0, 0x22,
		0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0xa3, 0x00,
		0x00, 0x13, 0x06, 0x6e, 0x73, 0x2d, 0x32, 0x39,
		0x37, 0x09, 0x61, 0x77, 0x73, 0x64, 0x6e, 0x73,
		0x2d, 0x33, 0x37, 0xc0, 0x3d, 0xc0, 0x22, 0x00,
		0x02, 0x00, 0x01, 0x00, 0x02, 0xa3, 0x00, 0x00,
		0x16, 0x06, 0x6e, 0x73, 0x2d, 0x39, 0x33, 0x30,
		0x09, 0x61, 0x77, 0x73, 0x64, 0x6e, 0x73, 0x2d,
		0x35, 0x32, 0x03, 0x6e, 0x65, 0x74, 0x00, 0x00,
		0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00}
	packet, errMsg := PacketReadFromByteSlice(buf1)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Bits, uint16(34048))
	udwTest.Equal(packet.QuestionName, "marketplace-downloads.customer.envatousercontent.com")
	udwTest.Equal(packet.QuestionType, DnsTypeA)
	udwTest.Equal(len(packet.AnswerList), 8)
	udwTest.Equal(packet.AnswerList[0].Name, "marketplace-downloads.customer.envatousercontent.com")
	udwTest.Equal(packet.AnswerList[0].Type, DnsTypeA)
	udwTest.Equal(packet.AnswerList[0].Result, "13.35.20.11")
	udwTest.Equal(packet.AnswerList[0].Ttl, uint32(60))

	outBuf, errMsg := PacketWriteToByteSlice(packet, nil)
	udwTest.Equal(errMsg, "")
	packet2, errMsg := PacketReadFromByteSlice(outBuf)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(len(packet2.AnswerList), 8)
	udwTest.Equal(packet2.AnswerList[0].Name, "marketplace-downloads.customer.envatousercontent.com")
	udwTest.Equal(packet2.AnswerList[0].Type, DnsTypeA)
	udwTest.Equal(packet2.AnswerList[0].Result, "13.35.20.11")
	udwTest.Equal(packet2.AnswerList[0].Ttl, uint32(60))
}

func TestDnsPacketRespBbc(ot *testing.T) {

	buf := []byte{0xb9, 0xf5, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x62, 0x62, 0x63,
		0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00,
		0x00, 0x00, 0xbe, 0x00, 0x04, 0x1f, 0x0d, 0x50, 0x01}
	packet, errMsg := PacketReadFromByteSlice(buf)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Id, uint16(47605))
	udwTest.Equal(packet.Bits, uint16(0x8180))
	udwTest.Equal(packet.IsRecursionAvailable(), true)
	udwTest.Equal(packet.IsAuthoritative(), false)
	udwTest.Equal(packet.HasEdns4096, false)
	udwTest.Equal(packet.Ancount, uint16(1))
	udwTest.Equal(packet.Nscount, uint16(0))
	udwTest.Equal(packet.Arcount, uint16(0))
	udwTest.Equal(packet.HasCompressDomain, true)
	udwTest.Equal(IsLookLikeFakePacket(packet), true)

	{
		buf := []byte{0x6d, 0xb1, 0x85, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00, 0x01, 0x03, 0x62, 0x62, 0x63,
			0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00,
			0x00, 0x01, 0x2c, 0x00, 0x04, 0x97, 0x65, 0x00, 0x51, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00,
			0x00, 0x01, 0x2c, 0x00, 0x04, 0x97, 0x65, 0x80, 0x51, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00,
			0x00, 0x01, 0x2c, 0x00, 0x04, 0x97, 0x65, 0xc0, 0x51, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00,
			0x00, 0x01, 0x2c, 0x00, 0x04, 0x97, 0x65, 0x40, 0x51, 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01, 0x00,
			0x00, 0x03, 0x84, 0x00, 0x0f, 0x03, 0x6e, 0x73, 0x34, 0x03, 0x62, 0x62, 0x63, 0x02, 0x63, 0x6f,
			0x02, 0x75, 0x6b, 0x00, 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0x84, 0x00, 0x0e,
			0x03, 0x6e, 0x73, 0x33, 0x03, 0x62, 0x62, 0x63, 0x03, 0x6e, 0x65, 0x74, 0xc0, 0x70, 0xc0, 0x0c,
			0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0x84, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x33, 0xc0, 0x69,
			0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x03, 0x84, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x34,
			0xc0, 0x84, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
		packet, errMsg := PacketReadFromByteSlice(buf)
		udwTest.Equal(errMsg, "")
		udwTest.Equal(packet.Id, uint16(28081))
		udwTest.Equal(packet.IsRecursionAvailable(), false)
		udwTest.Equal(packet.IsAuthoritative(), true)
		udwTest.Equal(packet.HasEdns4096, true)
		udwTest.Equal(packet.Ancount, uint16(4))
		udwTest.Equal(packet.Nscount, uint16(4))
		udwTest.Equal(packet.Arcount, uint16(1))
		udwTest.Equal(packet.HasCompressDomain, true)
		udwTest.Equal(IsLookLikeFakePacket(packet), false)
	}
}
