package udwVpnPacket

import (
	"bytes"
	"fmt"
	"github.com/tachyon-protocol/udw/udwBytes"
	"github.com/tachyon-protocol/udw/udwErr"
	"github.com/tachyon-protocol/udw/udwHex"
	"github.com/tachyon-protocol/udw/udwTest"
	"net"
	"runtime/debug"
	"strings"
	"testing"
)

func TestCheckSumUdp(ot *testing.T) {
	testCase := []byte{0x45, 0x0,
		0x0, 0x3b,
		0xc3, 0xb8,
		0x0, 0x0,
		0xff,
		0x11,
		0x66, 0xfe,
		0xac, 0x15, 0x0, 0x1,
		0x72, 0x72, 0x72, 0x72,

		0xe4, 0xfa,
		0x0, 0x35,
		0x0, 0x27,
		0x4, 0x3b,
		0xe0, 0x2a, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0x78, 0x78, 0x63, 0x6c, 0x7a, 0x72, 0x74, 0x61, 0x64, 0x64, 0x6a, 0x77, 0x75, 0x0, 0x0, 0x1, 0x0, 0x1}
	testCase[10] = 0
	testCase[11] = 0
	testCase[26] = 0
	testCase[27] = 0
	ipPacket, errMsg := NewIpv4PacketFromBuf(testCase)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(ipPacket.CheckSumCorrect(), "ip checksum fail")
	ipPacket.RecomputeCheckSum()
	newTestCase := ipPacket.SerializeToBuf()
	udwTest.Equal(newTestCase[10], uint8(0x66))
	udwTest.Equal(newTestCase[11], uint8(0xfe))
	udwTest.Equal(newTestCase[26], uint8(0x4))
	udwTest.Equal(newTestCase[27], uint8(0x3b))
	udwTest.Equal(ipPacket.CheckSumCorrect(), "")
}

func TestCheckSumTcp(ot *testing.T) {
	testCase := []byte{
		0x45, 0x0, 0x0, 0x34,
		0x1d, 0xc5, 0x40, 0x0,
		0x40, 0x6,
		0x7a, 0x6a,
		0xac, 0x15, 0x0, 0x1,
		0xad, 0xc2, 0x48, 0xbc,

		0xd9, 0x57,
		0x14, 0x6c,
		0x10, 0xda, 0x70, 0x3e,
		0xd3, 0x5a, 0x93, 0x83,
		0x80,
		0x10,
		0x10, 0xe,
		0x85, 0x58,
		0x0, 0x0,
		0x1, 0x1, 0x8, 0xa, 0x58, 0xf, 0xcd, 0x83, 0xbf, 0xdb, 0x83, 0x98,
	}
	testCase[10] = 0
	testCase[11] = 0
	testCase[36] = 0
	testCase[37] = 0
	ipPacket, errMsg := NewIpv4PacketFromBuf(testCase)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(ipPacket.CheckSumCorrect(), "ip checksum fail")
	ipPacket.RecomputeCheckSum()
	newTestCase := ipPacket.SerializeToBuf()
	udwTest.Equal(newTestCase[10], uint8(0x7a))
	udwTest.Equal(newTestCase[11], uint8(0x6a))
	udwTest.Equal(newTestCase[36], uint8(0x85))
	udwTest.Equal(newTestCase[37], uint8(0x58))
	udwTest.Equal(ipPacket.CheckSumCorrect(), "")
	ipPacket.RecomputeCheckSum()
	udwTest.Equal(newTestCase[36], uint8(0x85))
	udwTest.Equal(newTestCase[37], uint8(0x58))

	testCase = []byte{
		0x45, 0x00, 0x00, 0x8c,
		0x28, 0xd1, 0x00, 0x00, 0xff, 0x06, 0xa0, 0x79,
		0x73, 0xef, 0xd2, 0x1b, 0xac, 0x15, 0x00, 0x01,
		0x00, 0x50, 0xe7, 0xa3, 0x93, 0x2d, 0xac, 0xdb,
		0x9d, 0x0e, 0x0f, 0x41, 0x50, 0x10, 0xff, 0xff,
		0xff, 0xe6, 0x00, 0x00, 0x34, 0x70, 0x78, 0x3b,
		0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
		0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70,
		0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
		0x67, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a,
		0x31, 0x30, 0x70, 0x78, 0x3b, 0x63, 0x75, 0x72,
		0x73, 0x6f, 0x72, 0x3a, 0x64, 0x65, 0x66, 0x61,
		0x75, 0x6c, 0x74, 0x3b, 0x6f, 0x76, 0x65, 0x72,
		0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x68, 0x69, 0x64,
		0x64, 0x65, 0x6e, 0x3b, 0x77, 0x68, 0x69, 0x74,
		0x65, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a,
		0x6e, 0x6f, 0x77, 0x72, 0x61, 0x70, 0x7d, 0x2e,
		0x63, 0x2d, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f,
	}
	ipPacket, errMsg = NewIpv4PacketFromBuf(testCase)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(ipPacket.IsTcp(), true)
	udwTest.Equal(ipPacket.GetTcpBodyLen(), 100)
	udwTest.Equal(ipPacket.CheckSumCorrect(), "")
	testCase[10] = 0
	testCase[11] = 0
	testCase[36] = 0
	testCase[37] = 0
	udwTest.Equal(ipPacket.CheckSumCorrect(), "ip checksum fail")
	ipPacket.RecomputeCheckSum()
	newTestCase = ipPacket.SerializeToBuf()
	udwTest.Equal(newTestCase[36], uint8(0xff))
	udwTest.Equal(newTestCase[37], uint8(0xe6))

	testCase = []byte{0x45, 0x00, 0x00, 0x40, 0x03, 0x92, 0x40, 0x00, 0x40, 0x06, 0x2d, 0x1d, 0x01, 0x02, 0x03, 0x04,
		0x04, 0x03, 0x02, 0x01, 0xc9, 0x5a, 0x00, 0x50, 0x57, 0x7c, 0x1e, 0xde, 0x00, 0x00, 0x00, 0x00,
		0xb0, 0x02, 0xff, 0xff, 0x03, 0xc7, 0x00, 0x00, 0x02, 0x04, 0x05, 0x43, 0x01, 0x03, 0x03, 0x05,
		0x01, 0x01, 0x08, 0x0a, 0x98, 0x05, 0x51, 0x93, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00,
	}
	ipPacket, errMsg = NewIpv4PacketFromBuf(testCase)
	udwTest.Equal(errMsg, "")
	fmt.Println(ipPacket.String())
	udwTest.Ok(ipPacket.GetSrcIp().Equal(net.ParseIP("1.2.3.4")))
	udwTest.Ok(ipPacket.GetDstIp().Equal(net.ParseIP("4.3.2.1")))
	udwTest.Equal(ipPacket.IsTcp(), true)
	udwTest.Equal(ipPacket.GetTcpBodyLen(), 0)
	udwTest.Equal(ipPacket.CheckSumCorrect(), "")
	testCase[10] = 0
	testCase[11] = 0
	testCase[36] = 0
	testCase[37] = 0
	udwTest.Equal(ipPacket.CheckSumCorrect(), "ip checksum fail")
	ipPacket.RecomputeCheckSum()
	udwTest.Equal(ipPacket.CheckSumCorrect(), "")
}

func TestPacketFragments(ot *testing.T) {
	bs := "4500056c1e7b2000321183e4714b019eac15a223576d684605c88c8e0100fce9a0bb919e026dc1a70010000011fc8c7c0000400907000006600002c000bdddfc6710050e0e03d9a869b195efdf7ec53f81c7cda9845e9de864367c1836357550e6611f8b412ebc21a8218043b816402a0895c0b2013e054a8ba92c5314ca5787ace12a92270faff0538582b2e62d776586db9a4b61572e7b7361bc547ae5f83347be69430a91f8a3af040086a5f0a4bbd781828b5731f173918ef0535860d18f5e12f3f93e09f4120633e699a62482b2fd7bfc1183136daf81482e588abf19e3bc48182206410d2d618c42107ce17e19f036809ee07fa14f7c1642079e3bf3535bc50cfe7efae8140596c2fa8b0cb0e18aa14314f2546e08daaad5608784397c47fac0c1c78468d6747848afc57f2808778a3bc905006ff78b95fb112af0cf0d713881f78442bc48ff089010d571de2ff43fa8df8221efccd138bbc080b5c23e19cbc80c12cc94bfc7f24d1793bcea827e396dd33bc272c8aff1fb838f60dc0225f0c018b8af13f1fc117c19702ff781c75ba88e78f789cb9a051c1607719162bf6c6c25e1ad2e0c711d1f8a86bc31a171cfda08fe0720391655bcbc291c2e90ad45cd115bb8a06f8a007e8efc2988d0903d832d7714345e177f2ffbc9c1262efbd2c09f10d6aab5e04fe2ff1712afaae487350cf13088a0e6fc9369c886440fb2ee2f46e982333f7c4cef83d04e68e6f5c673ef834d416077c18f831c5717fc0c0833165ffee5e32140a9f7d6aa29f37f5c7a4c18f742682c343d0787e08ed2785bb355e1041caf46395f64a41c4e84b6b5bc25a5fc22e3625fc37c19f2ab99c6bdf8a114c69763a9b3c46b555d560a75f9a6fc85191e5cf6276f80d1c5442cf12969719c4485ea5ee27344277f26f19d85c12f9bc244743d39d7900f11677fa1bea580d0f0119b80fcd983f6fa7880f2cbf4bd5f80d088799f01e69f7f7cef50123a8147c08bf2f01600a2482302d6390df67957cd0808e0872f4071014501a01191d7147c56d2e21411541a6876133aaeb5788474b630d1dabe02580c4594bde7c0e1afd1057e020b5ff16e0dbf0f3ccb8f8500e150ce84710144170b82c93ea7a7ff8440f008858357efecd111c2f869a93bfd8c43e2d092e0ed8c42274c00000ceb419a26021fc64eb36d74e5360a15f4ff086bb20a15f8bdfe31e46351ca2c1aa933fe14c5dbb8bb62bab78a64c1b5dfe089b577fbc57fcbbbeb853147c5767147c57dfe33147c5067dc2aa47c51ff1996038ba082a0034cbc470400b0ec6b2c001ff8cc480f92f8a000e2ea2800c5cf5c500027f193255f0a4e283495451a4aa280f8807b7cddb2fdf540a774955eaa5bf7f4086674955ecc11341130a7a2451942f5efb9ef7982388874fcfd55ff0552e7cc11c47c5d46b1676bc436104872a14f3026626e7a9664bd91729ab106f5aa40fb66185062b10f46d0b8c1221c881e70e3f960dfe207e58ebe80fd0391c58b50178b565a3c59b209326b302599cb3d408e07330bc5da3f8a7177b04b06f16f195ace81e5a32a2eab5d8bc535d575d1fd1d0207ffe087ffffff191229ee29de29f143f5402220962053e29fbfc1708b55ad5e7e49457f71e36eeeeeeeff8c8b26001c4ed050054b6dedc1401de241e73ff19bb45b15bb425c2d96e29b8ae2efe144f8d715e5fc4382071396dfbe398ffbbf03ef7c438fe572e3ae699ebf08e6f6b7adeb97f4b4c64c28062b58a0069c0e26f1715ac500c367d9f161fc6bc249e50da78686ab444d7bc20f11f023e4104248ea3178000b29a4a04fe1e4e49072e78b715127c456dae259e519857bca2616752263cf8b17373660b34b092356c78458225afcfa7060caabdb6c019bd3d6bc60c5996623859ad46161da9e5e5f8b9b3c58ba31e5d37bf78566c26f4e7e0b877b4ef7b444106c"
	b := udwHex.MustDecodeStringToByteArray(bs)
	packet, errMsg := NewIpPacketFromBuf(b)
	udwTest.Equal(errMsg, "")
	udwTest.Equal(packet.Ipv4HasMoreFragments(), true)
	udwTest.Ok(strings.Contains(packet.String(), "hasMoreFramgments"))
}

func TestPacket2(ot *testing.T) {

	b := []byte{0x45, 0x0, 0x0, 0x84,
		0x55, 0xad, 0x0, 0xab,
		0x33, 0x11, 0x15, 0xbe,
		0x75, 0x54, 0x98, 0xf9,
		0xac, 0x15, 0x60, 0xf0,

		0xa6, 0xe, 0xd7, 0x6c,
		0xb4, 0x6d, 0x65, 0xed,
		0x37, 0x4b, 0x34, 0xe0, 0xc6, 0xb7, 0x5e, 0x2d, 0x15, 0xbc, 0x6c, 0xf7, 0x37, 0x2c, 0xf2, 0xe, 0x1, 0x79, 0xab, 0xdf, 0xac, 0x31, 0xc6, 0xf1, 0xec, 0x57, 0x3e, 0x21, 0x94, 0xce, 0x86, 0x26, 0xdc, 0x5, 0xa2, 0xe1, 0x2f, 0xd9, 0x16, 0xfb, 0x99, 0xbe, 0xd6, 0x8a, 0xfa, 0xa5, 0xde, 0xb8, 0x0, 0x68, 0x10, 0x11, 0xc6, 0x45, 0x51, 0xe3, 0x26, 0x98, 0xa8, 0xab, 0xa3, 0x21, 0x45, 0x58, 0x38, 0x50, 0x84, 0x16, 0xd2, 0xf5, 0xa6, 0xee, 0x0, 0x0, 0x2, 0x8d, 0x1b, 0x48, 0x8d, 0xd6, 0xb1, 0xce, 0x9d, 0xdb, 0x63, 0x60, 0xef, 0x7a, 0x86, 0xb0, 0x23, 0x83, 0x6b, 0x67, 0xd9, 0xb3, 0x46, 0x25, 0x5d, 0x83, 0xbd, 0x64, 0x87, 0x99}

	_, errMsg := NewIpv4PacketFromBuf(b)
	udwTest.Ok(errMsg != "")
	udwTest.Ok(strings.Contains(errMsg, "checkIPv4Packet"))

}

func TestRecomputeCheckSum(ot *testing.T) {
	buf := []byte("JK\x00dNO\x05\x03\x00\x0600\xe7\xff\x00\x00v@5\x90" +
		"r62rpkhbutwm8krnfgit" +
		"000000000000o0000000" +
		"0\x04000000000000000000" +
		"00000000000000000000")
	ipPacket, errMsg := NewIpv4PacketFromBuf(buf)
	udwErr.PanicIfErrorMsg(errMsg)
	ipPacket.RecomputeCheckSum()
	udwTest.Equal(ipPacket.CheckSumCorrect(), "")
}

func TestRecomputeCheckSum2(ot *testing.T) {
	buf := append(udwHex.MustDecodeStringToByteArrayIgnoreNonHex(`4500 0073 0000 4000 4011 b861 c0a8 0001
c0a8 00c7 0035 e97c 005f 279f 1e4b 8180`), bytes.Repeat([]byte{0}, 115-32)...)
	packet, errMsg := NewIpv4PacketFromBuf(udwBytes.Clone(buf))
	udwErr.PanicIfErrorMsg(errMsg)
	packet.RecomputeCheckSum()
	udwTest.Equal(packet.buf[:20], buf[:20])
	udwTest.Equal(packet.CheckSumCorrect(), "")
}

func TestRecomputeCorrectSum(ot *testing.T) {
	for _, buf := range [][]byte{
		[]byte{0x45, 0x00, 0x00, 0x7b, 0x74, 0xfe, 0x40, 0x00, 0x40, 0x06, 0xf0, 0xca, 0xac, 0x15, 0x00, 0x01,
			0x78, 0x18, 0xb0, 0x85, 0xe2, 0x37, 0x04, 0xd1, 0xaf, 0x58, 0xd5, 0xba, 0x9f, 0x70, 0xb8, 0x54,
			0x50, 0x18, 0x20, 0x00, 0x06, 0x5d, 0x00, 0x00, 0x17, 0x03, 0x03, 0x00, 0x4e, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x13, 0x81, 0xc6, 0x67, 0xf1, 0xa5, 0x74, 0x8f, 0xc9, 0x61, 0xad, 0xd7,
			0xc2, 0xb3, 0x28, 0xea, 0x7d, 0x55, 0x3f, 0xe5, 0x04, 0xe0, 0x49, 0xcf, 0x0f, 0xbd, 0xf7, 0xb0,
			0x1d, 0x05, 0xa8, 0xe6, 0xa4, 0x75, 0xac, 0x30, 0xdc, 0x75, 0x2c, 0xda, 0x49, 0x70, 0xbc, 0xb7,
			0x80, 0x44, 0x8a, 0x82, 0x0f, 0x11, 0x8c, 0x8f, 0x2e, 0x07, 0x02, 0x8d, 0xb6, 0x2a, 0x2c, 0x56,
			0xfe, 0xcc, 0x1e, 0x4a, 0xc0, 0xa3, 0x96, 0xe7, 0x3c, 0x0c, 0x42},
		[]byte{0x45, 0x00, 0x00, 0x28, 0xdc, 0x4d, 0x40, 0x00, 0x3d, 0x06, 0x8c, 0xce, 0x78, 0x18, 0xb0, 0x85,
			0xac, 0x15, 0x00, 0x01, 0x04, 0xd1, 0xe2, 0x37, 0x9f, 0x70, 0xb8, 0x54, 0xaf, 0x58, 0xd9, 0x1a,
			0x50, 0x10, 0x01, 0x3a, 0x12, 0xa5, 0x00, 0x00},
		[]byte{0x45, 0x00, 0x00, 0x34, 0x13, 0x96, 0x40, 0x00, 0x40, 0x06, 0x52, 0x7a, 0xac, 0x15, 0x00, 0x01,
			0x78, 0x18, 0xb0, 0x85, 0xe2, 0x37, 0x04, 0xd1, 0xaf, 0x58, 0xd9, 0x1a, 0x9f, 0x70, 0xc3, 0x44,
			0x80, 0x10, 0x20, 0x00, 0xf2, 0x3f, 0x00, 0x00, 0x01, 0x01, 0x05, 0x0a, 0x9f, 0x70, 0xbe, 0x71,
			0x9f, 0x70, 0xc3, 0x44},
		[]byte{0x45, 0x00, 0x05, 0x6b, 0x5f, 0x67, 0x40, 0x00, 0x34, 0x06, 0x76, 0x79, 0xc0, 0x1e, 0xff, 0x77,
			0xac, 0x15, 0x00, 0x01, 0x01, 0xbb, 0xe2, 0x7c, 0x11, 0xf2, 0xc7, 0x25, 0x65, 0x5b, 0x56, 0x8f,
			0x80, 0x10, 0x00, 0x1f, 0xf3, 0xff, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0xd2, 0x7e, 0x08, 0xf1,
			0x27, 0x70, 0xd1, 0xcf, 0xd7, 0x5f, 0xff, 0x6b, 0xff, 0x5e, 0xe5, 0x0f, 0xea, 0x52, 0x0b, 0x79,
			0xd5, 0x95, 0x8f, 0x78, 0x23, 0x8e, 0x97, 0xaa, 0xdc, 0x78, 0x5a, 0x8f, 0x33, 0x36, 0x8d, 0x2f,
			0x23, 0x86, 0xbc, 0xfc, 0x9f, 0xaa, 0x2e, 0x5b, 0xc3, 0xbe, 0x22, 0xfc, 0x45, 0x05, 0xa2, 0x9a,
			0x9e, 0x57, 0xed, 0x73, 0xec, 0xc6, 0xa8, 0x3e, 0x11, 0x82, 0xd0, 0x1c, 0x73, 0x37, 0xd5, 0x6b,
			0xf8, 0xe7, 0xfe, 0xad, 0x01, 0x7a, 0x88, 0x64, 0x63, 0x23, 0xea, 0x94, 0x55, 0x62, 0x44, 0x37,
			0x49, 0x43, 0x9b, 0x70, 0x8c, 0x40, 0xb9, 0xeb, 0x96, 0x8f, 0x50, 0xa4, 0xcd, 0x0a, 0x9c, 0xd2,
			0x82, 0xad, 0x53, 0x78, 0xbb, 0x8f, 0x7a, 0x9b, 0x52, 0xdd, 0xa2, 0x11, 0x23, 0xb5, 0x72, 0x4f,
			0x1d, 0x01, 0xc0, 0x6e, 0x43, 0x53, 0xc5, 0x29, 0x8c, 0xc2, 0x83, 0x72, 0xf1, 0x0c, 0x61, 0x38,
			0xec, 0xa4, 0xf7, 0xcc, 0x54, 0x1c, 0xa8, 0xaa, 0xda, 0x08, 0xf1, 0xf0, 0xc7, 0xbc, 0x70, 0xf4,
			0x98, 0x35, 0x4b, 0x52, 0x7a, 0xc5, 0xc9, 0x33, 0xea, 0x9c, 0x82, 0x76, 0xe2, 0x76, 0x2c, 0x8b,
			0x87, 0x07, 0x12, 0x6b, 0xf4, 0xd8, 0xb0, 0x41, 0xdd, 0xd7, 0x9a, 0xbe, 0x15, 0x83, 0x79, 0xe7,
			0x1b, 0x8a, 0xb8, 0xbd, 0xf0, 0x77, 0x0c, 0x51, 0xee, 0x5c, 0x3a, 0x21, 0x74, 0x40, 0x76, 0x25,
			0xb7, 0x71, 0xea, 0x9f, 0x55, 0x95, 0x72, 0xea, 0x31, 0x4e, 0x80, 0x5f, 0x58, 0x5b, 0x28, 0x89,
			0xd3, 0x87, 0x30, 0x65, 0xf6, 0x64, 0x18, 0x38, 0x52, 0x80, 0xfe, 0x58, 0x8c, 0xfb, 0x8f, 0x47,
			0xe5, 0xc3, 0xfe, 0xe3, 0x1f, 0x28, 0x54, 0xa6, 0x18, 0x39, 0x26, 0x9c, 0xca, 0x3e, 0x76, 0xdb,
			0x9e, 0xd7, 0xa3, 0x0d, 0x5c, 0x9d, 0x5f, 0x40, 0x9e, 0xcf, 0x59, 0x84, 0xd5, 0xd0, 0x8a, 0xa8,
			0x15, 0xf5, 0x93, 0xca, 0x78, 0x77, 0xad, 0x70, 0x64, 0x30, 0xd7, 0x9e, 0xfe, 0x89, 0xb0, 0xc9,
			0x1a, 0xc8, 0xbe, 0x43, 0xd0, 0x67, 0x47, 0xa0, 0x14, 0xc5, 0xc1, 0x10, 0xea, 0xde, 0x33, 0x8c,
			0xb6, 0xf3, 0xb6, 0xa1, 0xb1, 0xdc, 0x67, 0xa2, 0xd9, 0x64, 0x30, 0xe8, 0x39, 0x3a, 0x63, 0xf7,
			0x75, 0x36, 0x20, 0x52, 0x0c, 0xd9, 0xde, 0x1d, 0x9e, 0xba, 0xc3, 0x93, 0x17, 0x03, 0x03, 0x05,
			0x72, 0x88, 0x92, 0xf6, 0x1f, 0xdb, 0x49, 0x12, 0x79, 0xe3, 0xd7, 0x4e, 0x02, 0x07, 0x7d, 0x8b,
			0x70, 0x1b, 0x97, 0x96, 0xd0, 0x0c, 0xcc, 0x55, 0xb4, 0x16, 0xf1, 0x6b, 0xb7, 0xc7, 0x72, 0x61,
			0x0a, 0x1a, 0x1c, 0x82, 0xcc, 0xb1, 0xc3, 0xc5, 0xd8, 0x5f, 0x3c, 0x68, 0x71, 0x62, 0x16, 0x8b,
			0xbd, 0x72, 0xe4, 0x04, 0x81, 0x82, 0x8a, 0xd1, 0x8a, 0xac, 0xa6, 0x18, 0x28, 0x12, 0xf8, 0x14,
			0xcb, 0x57, 0x40, 0x77, 0xc2, 0x74, 0xc5, 0xa4, 0xd4, 0x14, 0xad, 0x61, 0x36, 0x08, 0xa0, 0x76,
			0xd5, 0xeb, 0x65, 0x68, 0xe1, 0x25, 0xd6, 0xc3, 0x99, 0x59, 0x16, 0x46, 0xfe, 0x7a, 0x15, 0x6f,
			0x2e, 0x4d, 0xf2, 0x79, 0x37, 0x95, 0x60, 0xfa, 0xc6, 0x69, 0xfd, 0x5c, 0x1a, 0x39, 0xf8, 0xa5,
			0x0f, 0x9f, 0x4a, 0xfe, 0x4a, 0x42, 0x76, 0xb9, 0x9e, 0xd1, 0x98, 0x97, 0x60, 0xe3, 0x37, 0x51,
			0xc7, 0x2f, 0x7d, 0x46, 0xf8, 0xbf, 0x65, 0xe7, 0x49, 0x6e, 0xc3, 0x4c, 0xdc, 0x59, 0xac, 0x0d,
			0x43, 0x26, 0x20, 0x5c, 0x46, 0xe6, 0x63, 0x85, 0xbd, 0x9b, 0x06, 0x6a, 0x0f, 0x8e, 0x68, 0xde,
			0x3b, 0x41, 0x39, 0x5f, 0xca, 0x73, 0xcb, 0x43, 0x81, 0x12, 0x08, 0x24, 0xe4, 0x45, 0xb2, 0x34,
			0x2a, 0xcc, 0xeb, 0xcd, 0xad, 0x06, 0xd9, 0x4b, 0x6c, 0x45, 0xe3, 0xa4, 0x1d, 0xb6, 0x20, 0x2c,
			0x65, 0xfb, 0xf4, 0xc5, 0x44, 0x1e, 0x75, 0xc7, 0x86, 0x70, 0xe2, 0x10, 0xb1, 0x36, 0x5b, 0x21,
			0xa1, 0x37, 0xbb, 0x2f, 0xb9, 0xa3, 0xac, 0x38, 0x13, 0xd9, 0x87, 0xe8, 0x8d, 0x80, 0x83, 0x26,
			0x08, 0x4a, 0xc6, 0xcd, 0x01, 0x19, 0x7c, 0xe8, 0x3a, 0x97, 0x02, 0xd8, 0x6b, 0x99, 0x0c, 0xba,
			0xaf, 0xf6, 0xaf, 0x43, 0xe2, 0x48, 0xb8, 0xd9, 0x5c, 0xb6, 0xab, 0x6d, 0x05, 0x5c, 0x7a, 0xfb,
			0x81, 0xd0, 0x1c, 0xe5, 0x6c, 0x74, 0x56, 0xd4, 0xe4, 0xad, 0xb5, 0x80, 0x8d, 0xcc, 0x8b, 0x32,
			0xf3, 0x21, 0xf1, 0x4f, 0x1b, 0x2b, 0x02, 0xb9, 0xb8, 0xb6, 0x90, 0x28, 0xef, 0x69, 0xdd, 0xd2,
			0xd9, 0x3e, 0xf4, 0x02, 0x89, 0x6a, 0x02, 0xec, 0xa8, 0xb2, 0x4b, 0x88, 0x12, 0x3b, 0xde, 0x26,
			0xc9, 0x34, 0x6d, 0x04, 0x50, 0xb4, 0xfd, 0xfa, 0x41, 0x47, 0x26, 0x24, 0x01, 0x48, 0x00, 0x28,
			0xb1, 0xe9, 0xa0, 0x99, 0x9f, 0xb4, 0xa5, 0x83, 0x6f, 0x39, 0x15, 0x32, 0x89, 0xfb, 0xe4, 0xcc,
			0x3f, 0xf4, 0x2b, 0x4a, 0x8f, 0x3b, 0x4c, 0x4d, 0xc4, 0xb8, 0x28, 0xcc, 0x0d, 0x28, 0x6e, 0xb7,
			0x2b, 0xee, 0x55, 0xa7, 0x6e, 0x13, 0x0f, 0x37, 0x25, 0x69, 0xec, 0xf7, 0x02, 0xb1, 0x6d, 0xc3,
			0x02, 0x68, 0x73, 0x35, 0x2f, 0x31, 0x58, 0x1c, 0x4d, 0x9a, 0x5b, 0x05, 0x3f, 0x4e, 0x5a, 0xdf,
			0xd7, 0x99, 0x99, 0xa8, 0xc3, 0x68, 0x1c, 0x5d, 0x9b, 0xba, 0x13, 0xe6, 0x3d, 0xd7, 0xe3, 0x1e,
			0xe0, 0xab, 0x43, 0x8e, 0x48, 0xe2, 0x74, 0x70, 0xc9, 0x01, 0x91, 0x28, 0xc3, 0x06, 0xfc, 0x45,
			0xa0, 0x2e, 0x4b, 0x8c, 0xfa, 0x5b, 0x76, 0x85, 0x70, 0xa4, 0x43, 0xea, 0x66, 0x57, 0x93, 0xe9,
			0xb0, 0xcf, 0x3a, 0x32, 0x08, 0x2d, 0x76, 0x59, 0xc4, 0xa7, 0xc8, 0x17, 0x3d, 0x9d, 0x69, 0x62,
			0x79, 0x41, 0x84, 0x77, 0x6f, 0xb7, 0x74, 0x0b, 0xe5, 0x17, 0x25, 0xab, 0xb1, 0x8f, 0x20, 0xe8,
			0x3d, 0x15, 0x23, 0x5a, 0xda, 0x82, 0xf1, 0xfb, 0xac, 0x97, 0x12, 0x7e, 0xb2, 0x4b, 0x4d, 0x74,
			0x86, 0xd1, 0x5a, 0x40, 0x35, 0x83, 0xda, 0x4e, 0x4a, 0xf6, 0xb5, 0xa7, 0x11, 0x36, 0x8d, 0x17,
			0xb1, 0x3e, 0xf3, 0x71, 0x31, 0x05, 0x69, 0xc8, 0x5e, 0x55, 0xae, 0xb7, 0x39, 0x8c, 0xa9, 0x10,
			0xfd, 0xb0, 0xb5, 0x9a, 0x7d, 0xaf, 0x7e, 0xce, 0x5b, 0x7f, 0x74, 0x39, 0xa4, 0x4f, 0xa2, 0x21,
			0x14, 0x96, 0x3e, 0xd6, 0x6a, 0x2b, 0x25, 0xcb, 0x81, 0x30, 0x7e, 0x72, 0x30, 0xac, 0x27, 0xdc,
			0xfb, 0x35, 0xc7, 0xf3, 0x5a, 0xa7, 0x42, 0xc5, 0x2a, 0xd4, 0xf3, 0x6a, 0xaa, 0x9b, 0x88, 0xa1,
			0xd5, 0x4f, 0x30, 0x30, 0x01, 0x49, 0xa5, 0xe8, 0x45, 0x6b, 0xad, 0xf2, 0xff, 0x62, 0xe5, 0xb9,
			0xc7, 0x5d, 0x5c, 0xc0, 0xbb, 0x50, 0x91, 0x7d, 0x8d, 0x8f, 0xc8, 0xae, 0x46, 0x2b, 0x79, 0x08,
			0xd0, 0x66, 0x07, 0xee, 0xc2, 0x67, 0x78, 0xdf, 0x85, 0xe5, 0xa9, 0x57, 0x66, 0x73, 0x79, 0x2d,
			0x51, 0xa9, 0x76, 0x8d, 0x33, 0x1f, 0x12, 0xae, 0xa3, 0xe6, 0x34, 0xea, 0x67, 0xda, 0x0e, 0xc8,
			0x12, 0x85, 0xcc, 0x72, 0x1a, 0x65, 0x03, 0x9a, 0xef, 0xdb, 0x13, 0x8e, 0x7f, 0x8a, 0xe3, 0xab,
			0x85, 0x8c, 0x33, 0xb3, 0x4b, 0xcc, 0x7c, 0x65, 0x59, 0x55, 0x69, 0x47, 0xc3, 0x7e, 0x27, 0x4a,
			0x0b, 0x99, 0xf6, 0xa7, 0xb8, 0xca, 0xb9, 0xbd, 0x14, 0x2a, 0x76, 0x16, 0x95, 0xbf, 0x28, 0xd4,
			0x4d, 0xe7, 0xd8, 0x92, 0xf0, 0xe2, 0x6c, 0x2d, 0xb9, 0x5a, 0x19, 0xbf, 0x80, 0xd8, 0xae, 0xf2,
			0x19, 0x1e, 0xd4, 0x6a, 0xbb, 0xbf, 0x8c, 0xbc, 0xd8, 0x31, 0xf9, 0x4f, 0x6d, 0xc2, 0xe0, 0xa5,
			0x56, 0x1c, 0x97, 0x70, 0xf2, 0xf9, 0x7a, 0xd9, 0x36, 0x5f, 0xb0, 0x45, 0xd4, 0x4d, 0x7c, 0xab,
			0xfe, 0x41, 0x69, 0xde, 0xa6, 0x71, 0xdd, 0x70, 0x19, 0xbb, 0x12, 0x07, 0x50, 0x31, 0xd2, 0xe1,
			0x1c, 0x90, 0x10, 0xdf, 0x46, 0x59, 0xe1, 0x0e, 0xd6, 0xf4, 0x7f, 0x08, 0xaf, 0xc3, 0xc2, 0x43,
			0x24, 0x89, 0xd3, 0x95, 0x01, 0xb4, 0xb3, 0xf7, 0x5b, 0xc9, 0x6b, 0x3c, 0x00, 0x63, 0x02, 0x7c,
			0xc0, 0x97, 0xbe, 0xc6, 0x6c, 0xce, 0x74, 0x29, 0x30, 0xfd, 0x0e, 0x88, 0x7f, 0x3d, 0x50, 0x3a,
			0x91, 0x05, 0x51, 0x1b, 0x3f, 0x02, 0xb0, 0x0f, 0xf1, 0x5a, 0x65, 0x7a, 0xa5, 0x5c, 0x43, 0x89,
			0xf3, 0x3c, 0x90, 0x62, 0x3e, 0x15, 0x31, 0x8c, 0xe6, 0xb1, 0x6d, 0xbd, 0x9d, 0x15, 0xf7, 0x9d,
			0x3e, 0x8b, 0x1d, 0x46, 0x30, 0x15, 0xf7, 0x87, 0x17, 0x3e, 0xc4, 0x83, 0xf9, 0x90, 0x63, 0xe4,
			0xa8, 0xda, 0x16, 0x4f, 0xca, 0x27, 0xda, 0x48, 0xb9, 0xbe, 0x89, 0xb8, 0xd1, 0xf4, 0xf9, 0x33,
			0xba, 0xc1, 0x2d, 0x2c, 0x01, 0x45, 0x2e, 0x8d, 0x1a, 0x6e, 0x34, 0xcf, 0x9e, 0xec, 0x00, 0x56,
			0x7f, 0x80, 0xe9, 0xd7, 0x6a, 0x06, 0xcd, 0xdf, 0x39, 0xa0, 0x63, 0x23, 0x3e, 0x95, 0x35, 0xd0,
			0xd6, 0x11, 0x87, 0xd8, 0x81, 0x58, 0xd4, 0x51, 0x54, 0x3f, 0x8b, 0x00, 0x4b, 0x4f, 0x3e, 0x79,
			0x60, 0xd8, 0xd7, 0x97, 0x12, 0xfd, 0xf4, 0x26, 0x54, 0xcd, 0x5c, 0xaf, 0x12, 0x99, 0xca, 0xae,
			0x92, 0x5a, 0x07, 0x4e, 0xad, 0x3e, 0xf3, 0x0d, 0x77, 0x34, 0x15, 0xc3, 0x57, 0x48, 0x1d, 0x45,
			0xcc, 0x7b, 0x10, 0x1a, 0x92, 0xf5, 0x23, 0xf6, 0x73, 0xe4, 0x2d, 0x4c, 0x5e, 0x35, 0x85, 0x40,
			0x24, 0x57, 0x3e, 0x26, 0xb3, 0x1c, 0xf6, 0xc6, 0xf2, 0x02, 0x8e, 0x57, 0x72, 0x4f, 0x39, 0x9a,
			0x00, 0xde, 0xa3, 0xe4, 0x88, 0x79, 0xc3, 0xdd, 0x96, 0x14, 0xcd, 0x33, 0x58, 0x12, 0x37, 0x0f,
			0x1d, 0x31, 0x1f, 0x1a, 0xce, 0x31, 0xab, 0x47, 0x18, 0xd7, 0x1f, 0x41, 0x49, 0xae, 0x7a, 0x26,
			0x42, 0xaa, 0x75, 0xc6, 0x22, 0xa3, 0xf5, 0x47, 0x07, 0x25, 0xf5, 0xb7, 0x32, 0x1c, 0x3d, 0x94,
			0xc3, 0xf1, 0xb0, 0x4c, 0xe2, 0x12, 0xaa, 0x80, 0xa5, 0xbe, 0xa4},
		[]byte{0x45, 0x00, 0x00, 0x28, 0xd1, 0x2d, 0x40, 0x00, 0x40, 0x06, 0xfb, 0xd1, 0xac, 0x15, 0x00, 0x01,
			0x1b, 0x2d, 0xa6, 0x8d, 0xce, 0x1d, 0x00, 0x50, 0x57, 0x27, 0x20, 0x6e, 0x01, 0xe0, 0xcc, 0x91,
			0x50, 0x10, 0x20, 0x00, 0x0d, 0x8f, 0x00, 0x00},
		[]byte{0x45, 0x00, 0x00, 0x29, 0xd1, 0x2d, 0x40, 0x00, 0x40, 0x06, 0xfb, 0xd0, 0xac, 0x15, 0x00, 0x01,
			0x1b, 0x2d, 0xa6, 0x8d, 0xce, 0x1d, 0x00, 0x50, 0x57, 0x27, 0x20, 0x6e, 0x01, 0xe0, 0xcc, 0x91,
			0x50, 0x10, 0x20, 0x00, 0x0d, 0x8e, 0x00, 0x00, 0x00},
		[]byte{0x45, 0x00, 0x04, 0x28, 0x5a, 0x57, 0x40, 0x00, 0x2a, 0x06, 0xa6, 0xcc, 0xb7, 0xe8, 0xe7, 0xad,
			0xac, 0x15, 0x00, 0x01, 0x01, 0xbb, 0xe1, 0xd6, 0xb3, 0x11, 0x17, 0x1e, 0xbe, 0xd9, 0xfe, 0x81,
			0x50, 0x18, 0x03, 0x2c, 0x78, 0xc9, 0x00, 0x00, 0x03, 0x13, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61,
			0x6c, 0x53, 0x69, 0x67, 0x6e, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17,
			0x0d, 0x31, 0x34, 0x30, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d,
			0x32, 0x34, 0x30, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x66, 0x31,
			0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x42, 0x45, 0x31, 0x19, 0x30, 0x17,
			0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x10, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67,
			0x6e, 0x20, 0x6e, 0x76, 0x2d, 0x73, 0x61, 0x31, 0x3c, 0x30, 0x3a, 0x06, 0x03, 0x55, 0x04, 0x03,
			0x13, 0x33, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x20, 0x4f, 0x72, 0x67,
			0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
			0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x41, 0x20, 0x2d, 0x20, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
			0x20, 0x2d, 0x20, 0x47, 0x32, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
			0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01,
			0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc7, 0x0e, 0x6c, 0x3f, 0x23, 0x93, 0x7f, 0xcc, 0x70, 0xa5,
			0x9d, 0x20, 0xc3, 0x0e, 0x53, 0x3f, 0x7e, 0xc0, 0x4e, 0xc2, 0x98, 0x49, 0xca, 0x47, 0xd5, 0x23,
			0xef, 0x03, 0x34, 0x85, 0x74, 0xc8, 0xa3, 0x02, 0x2e, 0x46, 0x5c, 0x0b, 0x7d, 0xc9, 0x88, 0x9d,
			0x4f, 0x8b, 0xf0, 0xf8, 0x9c, 0x6c, 0x8c, 0x55, 0x35, 0xdb, 0xbf, 0xf2, 0xb3, 0xea, 0xfb, 0xe3,
			0x56, 0xe7, 0x4a, 0x46, 0xd9, 0x13, 0x22, 0xca, 0x36, 0xd5, 0x9b, 0xc1, 0xa8, 0xe3, 0x96, 0x43,
			0x93, 0xf2, 0x0c, 0xbc, 0xe6, 0xf9, 0xe6, 0xe8, 0x99, 0xc8, 0x63, 0x48, 0x78, 0x7f, 0x57, 0x36,
			0x69, 0x1a, 0x19, 0x1d, 0x5a, 0xd1, 0xd4, 0x7d, 0xc2, 0x9c, 0xd4, 0x7f, 0xe1, 0x80, 0x12, 0xae,
			0x7a, 0xea, 0x88, 0xea, 0x57, 0xd8, 0xca, 0x0a, 0x0a, 0x3a, 0x12, 0x49, 0xa2, 0x62, 0x19, 0x7a,
			0x0d, 0x24, 0xf7, 0x37, 0xeb, 0xb4, 0x73, 0x92, 0x7b, 0x05, 0x23, 0x9b, 0x12, 0xb5, 0xce, 0xeb,
			0x29, 0xdf, 0xa4, 0x14, 0x02, 0xb9, 0x01, 0xa5, 0xd4, 0xa6, 0x9c, 0x43, 0x64, 0x88, 0xde, 0xf8,
			0x7e, 0xfe, 0xe3, 0xf5, 0x1e, 0xe5, 0xfe, 0xdc, 0xa3, 0xa8, 0xe4, 0x66, 0x31, 0xd9, 0x4c, 0x25,
			0xe9, 0x18, 0xb9, 0x89, 0x59, 0x09, 0xae, 0xe9, 0x9d, 0x1c, 0x6d, 0x37, 0x0f, 0x4a, 0x1e, 0x35,
			0x20, 0x28, 0xe2, 0xaf, 0xd4, 0x21, 0x8b, 0x01, 0xc4, 0x45, 0xad, 0x6e, 0x2b, 0x63, 0xab, 0x92,
			0x6b, 0x61, 0x0a, 0x4d, 0x20, 0xed, 0x73, 0xba, 0x7c, 0xce, 0xfe, 0x16, 0xb5, 0xdb, 0x9f, 0x80,
			0xf0, 0xd6, 0x8b, 0x6c, 0xd9, 0x08, 0x79, 0x4a, 0x4f, 0x78, 0x65, 0xda, 0x92, 0xbc, 0xbe, 0x35,
			0xf9, 0xb3, 0xc4, 0xf9, 0x27, 0x80, 0x4e, 0xff, 0x96, 0x52, 0xe6, 0x02, 0x20, 0xe1, 0x07, 0x73,
			0xe9, 0x5d, 0x2b, 0xbd, 0xb2, 0xf1, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0x25, 0x30,
			0x82, 0x01, 0x21, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03,
			0x02, 0x01, 0x06, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30,
			0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,
			0x04, 0x14, 0x96, 0xde, 0x61, 0xf1, 0xbd, 0x1c, 0x16, 0x29, 0x53, 0x1c, 0xc0, 0xcc, 0x7d, 0x3b,
			0x83, 0x00, 0x40, 0xe6, 0x1a, 0x7c, 0x30, 0x47, 0x06, 0x03, 0x55, 0x1d, 0x20, 0x04, 0x40, 0x30,
			0x3e, 0x30, 0x3c, 0x06, 0x04, 0x55, 0x1d, 0x20, 0x00, 0x30, 0x34, 0x30, 0x32, 0x06, 0x08, 0x2b,
			0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x26, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
			0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x2e,
			0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x30,
			0x33, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04, 0x2c, 0x30, 0x2a, 0x30, 0x28, 0xa0, 0x26, 0xa0, 0x24,
			0x86, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63, 0x72, 0x6c, 0x2e, 0x67, 0x6c, 0x6f,
			0x62, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x72, 0x6f, 0x6f, 0x74,
			0x2e, 0x63, 0x72, 0x6c, 0x30, 0x3d, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01,
			0x04, 0x31, 0x30, 0x2f, 0x30, 0x2d, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01,
			0x86, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x67, 0x6c,
			0x6f, 0x62, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6f, 0x6f,
			0x74, 0x72, 0x31, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
			0x60, 0x7b, 0x66, 0x1a, 0x45, 0x0d, 0x97, 0xca, 0x89, 0x50, 0x2f, 0x7d, 0x04, 0xcd, 0x34, 0xa8,
			0xff, 0xfc, 0xfd, 0x4b, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
			0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x46, 0x2a, 0xee, 0x5e, 0xbd, 0xae, 0x01, 0x60,
			0x37, 0x31, 0x11, 0x86, 0x71, 0x74, 0xb6, 0x46, 0x49, 0xc8, 0x10, 0x16, 0xfe, 0x2f, 0x62, 0x23,
			0x17, 0xab, 0x1f, 0x87, 0xf8, 0x82, 0xed, 0xca, 0xdf, 0x0e, 0x2c, 0xdf, 0x64, 0x75, 0x8e, 0xe5,
			0x18, 0x72, 0xa7, 0x8c, 0x3a, 0x8b, 0xc9, 0xac, 0xa5, 0x77, 0x50, 0xf7, 0xef, 0x9e, 0xa4, 0xe0,
			0xa0, 0x8f, 0x14, 0x57, 0xa3, 0x2a, 0x5f, 0xec, 0x7e, 0x6d, 0x10, 0xe6, 0xba, 0x8d, 0xb0, 0x08,
			0x87, 0x76, 0x0e, 0x4c, 0xb2, 0xd9, 0x51, 0xbb, 0x11, 0x02, 0xf2, 0x5c, 0xdd, 0x1c, 0xbd, 0xf3,
			0x55, 0x96, 0x0f, 0xd4, 0x06, 0xc0, 0xfc, 0xe2, 0x23, 0x8a, 0x24, 0x70, 0xd3, 0xbb, 0xf0, 0x79,
			0x1a, 0xa7, 0x61, 0x70, 0x83, 0x8a, 0xaf, 0x06, 0xc5, 0x20, 0xd8, 0xa1, 0x63, 0xd0, 0x6c, 0xae,
			0x4f, 0x32, 0xd7, 0xae, 0x7c, 0x18, 0x45, 0x75, 0x05, 0x29, 0x77, 0xdf, 0x42, 0x40, 0x64, 0x64,
			0x86, 0xbe, 0x2a, 0x76, 0x09, 0x31, 0x6f, 0x1d, 0x24, 0xf4, 0x99, 0xd0, 0x85, 0xfe, 0xf2, 0x21,
			0x08, 0xf9, 0xc6, 0xf6, 0xf1, 0xd0, 0x59, 0xed, 0xd6, 0x56, 0x3c, 0x08, 0x28, 0x03, 0x67, 0xba,
			0xf0, 0xf9, 0xf1, 0x90, 0x16, 0x47, 0xae, 0x67, 0xe6, 0xbc, 0x80, 0x48, 0xe9, 0x42, 0x76, 0x34,
			0x97, 0x55, 0x69, 0x24, 0x0e, 0x83, 0xd6, 0xa0, 0x2d, 0xb4, 0xf5, 0xf3, 0x79, 0x8a, 0x49, 0x28,
			0x74, 0x1a, 0x41, 0xa1, 0xc2, 0xd3, 0x24, 0x88, 0x35, 0x30, 0x60, 0x94, 0x17, 0xb4, 0xe1, 0x04,
			0x22, 0x31, 0x3d, 0x3b, 0x2f, 0x17, 0x06, 0xb2, 0xb8, 0x9d, 0x86, 0x2b, 0x5a, 0x69, 0xef, 0x83,
			0xf5, 0x4b, 0xc4, 0xaa, 0xb4, 0x2a, 0xf8, 0x7c, 0xa1, 0xb1, 0x85, 0x94, 0x8c, 0xf4, 0x0c, 0x87,
			0x0c, 0xf4, 0xac, 0x40, 0xf8, 0x59, 0x49, 0x98},
	} {
		packet, errMsg := NewIpv4PacketFromBuf(udwBytes.Clone(buf))
		udwTest.Equal(errMsg, "")
		udwTest.Equal(packet.CheckSumCorrect(), "")
		packet.RecomputeCheckSum()
		udwTest.Equal(packet.CheckSumCorrect(), "")
		udwTest.Equal(packet.SerializeToBuf(), buf)

	}
}

func TestBenchTcpCheckSum(ot *testing.T) {

	bs := "4500056be34840003706cb4397654c85ac15000101bbcb6dd46baefcbc6a81138010003be81f00000101080aae5f47cb214f145301a38201493082014530120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020186301d0603551d250416301406082b0601050507030106082b06010505070302303406082b0601050507010104283026302406082b060105050730018618687474703a2f2f6f6373702e64696769636572742e636f6d304b0603551d1f044430423040a03ea03c863a687474703a2f2f63726c342e64696769636572742e636f6d2f4469676943657274486967684173737572616e63654556526f6f7443412e63726c303d0603551d200436303430320604551d2000302a302806082b06010505070201161c68747470733a2f2f7777772e64696769636572742e636f6d2f435053301d0603551d0e041604145168ff90af0207753cccd9656462a212b859723b301f0603551d23041830168014b13ec36903f8bf4701d498261a0802ef63642bc3300d06092a864886f70d01010b05000382010100188a958903e66ddf5cfc1d68ea4a8f83d6512f8d6b44169eac63f5d26e6c84998baa8171845bed344eb0b7799229cc2d806af08e20e179a4fe034713eaf586ca59717df404966bd359583dfed331255c183884a3e69f82fd8c5b98314ecd789e1afd85cb49aaf2278b9972fc3eaad5410bdad536a1bf1c6e47497f5ed9487c03d9fd8b49a098264240ebd69211a4640a5754c4f51dd6025e6baceec4809a1272fa5693d7ffbf30850630bf0b7f4eff57059d24ed85c32bfba675a8ac2d16ef7d7927b2ebc29d0b07eaaa85d301a3202841594328d281e3aaf6ec7b3b77b640628005414501ef17063edec0339b67d3612e7287e469fc120057401e70f51ec9b416030301df160001db010001d7308201d30a0100a08201cc308201c806092b0601050507300101048201b9308201b530819ea21604145168ff90af0207753cccd9656462a212b859723b180f32303138303130373034313535375a307330713049300906052b0e03021a05000414cf26f518fac97e8f8cb342e01c2f6a109e8e5f0a04145168ff90af0207753cccd9656462a212b859723b0210083a84592f77f2e7951bf887cedec9668000180f32303138303130373034313535375aa011180f32303138303131343033333035375a300d06092a864886f70d01010b050003820101009c6e37e9c3a8481e523843403fafc5625a189b223d4b253db604c29cf04e1be85a9f7b4f946c6f6cc692238d1f96bfa5ee2bc15a0b019b325feb1deedbbc1be8feed2e43ed134e4d2bc8f3832f32c740d79450df8cb12ca1783a979aed9b3387a9db98113edff4e3f5a712c2f593a1b1d1916e9abb77b4ac71de5ac18a19b133380641659b92dc6f98ac60d1ba0eec8b7873e61c8737efa0ec85744c89562afde8f44a1afb5f8d395af2d9f25ca1e9d8720287ce6ad3bd8a2705ffcf8888d4e3f71920af8388339e6649fe746a3bfadbb509988bef100ee63b77e9ef8f92224bd3a5bc845bf325664b0588423f55cf737a932938351f9306f6847abfcedd73ed160303012c0c00012803001d20b1154edaa66a349165f9af6516c0933a9fa28505d8513a11e7de6414681cd45e060101007ecd78fdb2fc7ab2da81fda2ab3c74f846fcbbd7515df4611962ddfa9cf19b1c484ba0c2d0945963962060c0cbf528ba76067921c50570e61069621ad1621a9fc9d159146cf6426d33c3c3ba28bb21abc0748f2dee0213931ad7ecfb01f529427ca8a7a1b2a2bb3e6c9e1a03a3c37ebcb99360c022568dc8fc51939f4622115726913bf4a05cc7efcf9884cfaa67f17037a9aaaf98d56fe53adf74497c508f526ad48b6aa026dc800e150326e19f52c1140a9953d80d25542a459e87220fa70f"
	b := udwHex.MustDecodeStringToByteArray(bs)
	ipPacket, errMsg := NewIpv4PacketFromBuf(b)
	udwTest.Equal(errMsg, "")
	ipPacket.RecomputeCheckSum()
	udwTest.Equal(ipPacket.CheckSumCorrect(), "")
	newTestCase := ipPacket.SerializeToBuf()
	udwTest.Equal(newTestCase[10], uint8(0xcb))
	udwTest.Equal(newTestCase[11], uint8(0x43))
	udwTest.Equal(newTestCase[36], uint8(0xe8))
	udwTest.Equal(newTestCase[37], uint8(0x1f))

	debug.FreeOSMemory()

	const benchNum = 1e5
	udwTest.Benchmark(func() {
		udwTest.BenchmarkSetNum(benchNum)
		udwTest.BenchmarkSetBytePerRun(len(b))
		for i := 0; i < benchNum; i++ {
			ipPacket.RecomputeCheckSum()
		}
	})
}
